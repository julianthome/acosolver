(set-logic QF_S)
(set-option :produce-models true)
(set-option :strings-exp true)
(declare-fun var172 () String)
(declare-fun var174 () String)
(declare-fun var175 () String)
(declare-fun var177 () String)
(declare-fun var178 () String)
(declare-fun var179 () String)
(declare-fun var181 () String)
(declare-fun var182 () String)
(declare-fun var183 () String)
(declare-fun var185 () String)
(declare-fun var187 () String)
(declare-fun var190 () String)
(declare-fun var189 () String)
(declare-fun sv1 () String)
(declare-fun sv2 () String)

(assert (= true (= sv1 sv2 ) ))
(assert (= true (str.in.re var189 (re.++ (re.++ (re.++  (re.++ (re.* re.allchar ) (re.++  (str.to.re "'") (re.++ (re.+  (str.to.re " ") ) (re.++  (re.union  (str.to.re "O")  (str.to.re "o")) (re.++  (re.union  (str.to.re "R")  (str.to.re "r")) (re.++ (re.+  (str.to.re " ") )  (str.to.re "'"))))))) (str.to.re sv1) ) (re.++  (re.++  (str.to.re "'") (re.++ (re.* re.allchar ) (re.++  (str.to.re "=") (re.++ (re.* re.allchar )  (str.to.re "'"))))) (str.to.re sv2) ) )  (re.++  (str.to.re "'") (re.++ (re.*  (str.to.re " ") )  (re.union  (re.++  (str.to.re "\x2d")  (str.to.re "\x2d"))  (str.to.re "\x23")))) ) ) ))
(assert (= true (= var174 var172 ) ))
(assert (= true (= (str.++ var175 "'" ) var174 ) ))
(assert (= true (= (str.++ var177 var178 ) var175 ) ))
(assert (= true (= (str.++ var179 "' AND d_id = '" ) var177 ) ))
(assert (= true (= (str.++ var181 var182 ) var179 ) ))
(assert (= true (= (str.++ var183 "WHERE d_w_id = '" ) var181 ) ))
(assert (= true (= (str.++ var185 "FROM tpcc_district" ) var183 ) ))
(assert (= true (= (str.++ var187 "SELECT d_next_o_id" ) var185 ) ))
(assert (= true (= var178 var190 ) ))
(assert (= true (= var182 var189 ) ))

(check-sat)
(get-model)