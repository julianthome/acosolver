(set-logic QF_S)
(set-option :produce-models true)
(set-option :strings-exp true)
(declare-fun var38 () String)
(declare-fun var39 () String)
(declare-fun var41 () String)
(declare-fun var42 () String)
(declare-fun var43 () String)
(declare-fun var24 () String)
(declare-fun var25 () String)
(declare-fun var26 () String)
(declare-fun var27 () String)
(declare-fun var29 () String)
(declare-fun var31 () String)
(declare-fun var32 () String)
(declare-fun var33 () String)
(declare-fun var35 () String)
(declare-fun var37 () String)
(declare-fun sv1 () String)
(declare-fun sv2 () String)

(assert (= true (= sv1 sv2 ) ))
(assert (= true (str.in.re var43 (re.++ (re.++ (re.++  (re.++ (re.* re.allchar ) (re.++  (str.to.re "'") (re.++ (re.+  (str.to.re " ") ) (re.++  (re.union  (str.to.re "O")  (str.to.re "o")) (re.++  (re.union  (str.to.re "R")  (str.to.re "r")) (re.++ (re.+  (str.to.re " ") )  (str.to.re "'"))))))) (str.to.re sv1) ) (re.++  (re.++  (str.to.re "'") (re.++ (re.* re.allchar ) (re.++  (str.to.re "=") (re.++ (re.* re.allchar )  (str.to.re "'"))))) (str.to.re sv2) ) )  (re.++  (str.to.re "'") (re.++ (re.*  (str.to.re " ") )  (re.union  (re.++  (str.to.re "\x2d")  (str.to.re "\x2d"))  (str.to.re "\x23")))) ) ) ))
(assert (= true (= (str.++ var37 var38 ) var35 ) ))
(assert (= true (= (str.++ var39 "C_CREDIT_INFO= '" ) var37 ) ))
(assert (= true (= (str.++ var41 "'," ) var39 ) ))
(assert (= true (= (str.++ var42 var43 ) var41 ) ))
(assert (= true (= var25  var24 ) ))
(assert (= true (= (str.++ var26 var27 ) var25 ) ))
(assert (= true (= (str.++ var29 "where C_ID =" ) var26 ) ))
(assert (= true (= (str.++ var31 var32 ) var29 ) ))
(assert (= true (= (str.++ var33 "C_PO=" ) var31 ) ))
(assert (= true (= (str.++ var35 "'," ) var33 ) ))

(check-sat)
(get-model)