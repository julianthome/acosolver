(set-logic QF_S)
(set-option :produce-models true)
(set-option :strings-exp true)
(declare-fun var21 () String)
(declare-fun var22 () String)
(declare-fun var23 () String)
(declare-fun var25 () String)
(declare-fun var26 () String)
(declare-fun var27 () String)
(declare-fun var29 () String)
(declare-fun var30 () String)
(declare-fun var32 () Int)
(declare-fun sv1 () String)
(declare-fun sv2 () String)

(assert (= true (= sv1 sv2 ) ))
(assert (= true (str.in.re var26 (re.++ (re.++  (re.++ (re.* re.allchar ) (re.++  (str.to.re "'") (re.++ (re.+  (str.to.re " ") ) (re.++  (re.union  (str.to.re "O")  (str.to.re "o")) (re.++  (re.union  (str.to.re "R")  (str.to.re "r")) (re.++ (re.+  (str.to.re " ") )  (str.to.re "'"))))))) (str.to.re sv1) ) (re.++  (re.++  (str.to.re "'") (re.++ (re.* re.allchar ) (re.++  (str.to.re "=") (re.++ (re.* re.allchar )  (str.to.re "'"))))) (str.to.re sv2) ) ) ) ))
(assert (= true (not (= "" var26 )) ))
(assert (= true (= var22  var21 ) ))
(assert (= true (= (str.++ var23 "'\x5d" ) var22 ) ))
(assert (= true (= (str.++ var25 var26 ) var23 ) ))
(assert (= true (= (str.++ var27 "' and passwd/text\x28\x29='" ) var25 ) ))
(assert (= true (= (str.++ var29 var30 ) var27 ) ))
(assert (= true (= "/employees/employee\x5bloginID/text\x28\x29='" var29 ) ))
(assert (= true (not (= 0 var32 )) ))
(assert (= true (= (str.len var26 ) var32 ) ))

(check-sat)
(get-model)