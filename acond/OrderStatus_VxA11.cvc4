(set-logic QF_S)
(set-option :produce-models true)
(set-option :strings-exp true)
(declare-fun var658 () String)
(declare-fun var660 () Int)
(declare-fun var663 () String)
(declare-fun var662 () String)
(declare-fun var664 () String)
(declare-fun var622 () String)
(declare-fun var624 () String)
(declare-fun var625 () String)
(declare-fun var627 () String)
(declare-fun var628 () String)
(declare-fun var629 () String)
(declare-fun var631 () String)
(declare-fun var632 () String)
(declare-fun var633 () String)
(declare-fun var635 () String)
(declare-fun var636 () String)
(declare-fun var637 () String)
(declare-fun var639 () String)
(declare-fun var641 () String)
(declare-fun var643 () Int)
(declare-fun var647 () String)
(declare-fun var648 () String)
(declare-fun var649 () String)
(declare-fun var651 () String)
(declare-fun var652 () String)
(declare-fun var653 () String)
(declare-fun var654 () String)
(declare-fun var655 () String)
(declare-fun var656 () String)
(declare-fun var657 () String)
(declare-fun sv1 () String)
(declare-fun sv2 () String)

(assert (= true (= sv1 sv2 ) ))
(assert (= true (str.in.re var663 (re.++ (re.++ (re.++  (re.++ (re.* re.allchar ) (re.++  (str.to.re "'") (re.++ (re.+  (str.to.re " ") ) (re.++  (re.union  (str.to.re "O")  (str.to.re "o")) (re.++  (re.union  (str.to.re "R")  (str.to.re "r")) (re.++ (re.+  (str.to.re " ") )  (str.to.re "'"))))))) (str.to.re sv1) ) (re.++  (re.++  (str.to.re "'") (re.++ (re.* re.allchar ) (re.++  (str.to.re "=") (re.++ (re.* re.allchar )  (str.to.re "'"))))) (str.to.re sv2) ) )  (re.++  (str.to.re "'") (re.++ (re.*  (str.to.re " ") )  (re.union  (re.++  (str.to.re "\x2d")  (str.to.re "\x2d"))  (str.to.re "\x23")))) ) ) ))
(assert (= true (= (str.++ var658 "SELECT count\x28c_id\x29 AS namecnt" ) var657 ) ))
(assert (= true (not (= 0 var660 )) ))
(assert (= true (= var632 var663 ) ))
(assert (= true (= var628 var662 ) ))
(assert (= true (= var636 var664 ) ))
(assert (= true (= var624 var622 ) ))
(assert (= true (= (str.++ var625 "' ORDER BY c_first ASC" ) var624 ) ))
(assert (= true (= (str.++ var627 var628 ) var625 ) ))
(assert (= true (= (str.++ var629 "' AND c_w_id = '" ) var627 ) ))
(assert (= true (= (str.++ var631 var632 ) var629 ) ))
(assert (= true (= (str.++ var633 "' AND c_d_id = '" ) var631 ) ))
(assert (= true (= (str.++ var635 var636 ) var633 ) ))
(assert (= true (= (str.++ var637 "WHERE c_last = '" ) var635 ) ))
(assert (= true (= (str.++ var639 "FROM tpcc_customer" ) var637 ) ))
(assert (= true (= (str.++ var641 "SELECT c_balance, c_first, c_middle, c_id" ) var639 ) ))
(assert (= true (not (= 0 var643 )) ))
(assert (= true (= var648 var647 ) ))
(assert (= true (= (str.++ var649 "'" ) var648 ) ))
(assert (= true (= (str.++ var651 var628 ) var649 ) ))
(assert (= true (= (str.++ var652 "' AND c_w_id = '" ) var651 ) ))
(assert (= true (= (str.++ var653 var632 ) var652 ) ))
(assert (= true (= (str.++ var654 "' AND c_d_id = '" ) var653 ) ))
(assert (= true (= (str.++ var655 var636 ) var654 ) ))
(assert (= true (= (str.++ var656 "WHERE c_last = '" ) var655 ) ))
(assert (= true (= (str.++ var657 "FROM tpcc_customer" ) var656 ) ))

(check-sat)
(get-model)