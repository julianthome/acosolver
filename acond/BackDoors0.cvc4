(set-logic QF_S)
(set-option :produce-models true)
(set-option :strings-exp true)
(declare-fun var2 () Int)
(declare-fun var4 () String)
(declare-fun var6 () String)
(declare-fun var7 () Int)
(declare-fun var9 () String)
(declare-fun var10 () String)
(declare-fun var11 () String)
(declare-fun var13 () Bool)
(declare-fun var15 () String)
(declare-fun sv1 () String)
(declare-fun sv2 () String)

(assert (= true (= sv1 sv2 ) ))
(assert (= true (str.in.re var11 (re.++ (re.++ (re.++  (re.++ (re.* re.allchar ) (re.++  (str.to.re "'") (re.++ (re.+  (str.to.re " ") ) (re.++  (re.union  (str.to.re "O")  (str.to.re "o")) (re.++  (re.union  (str.to.re "R")  (str.to.re "r")) (re.++ (re.+  (str.to.re " ") )  (str.to.re "'"))))))) (str.to.re sv1) ) (re.++  (re.++  (str.to.re "'") (re.++ (re.* re.allchar ) (re.++  (str.to.re "=") (re.++ (re.* re.allchar )  (str.to.re "'"))))) (str.to.re sv2) ) )  (re.++  (str.to.re "'") (re.++ (re.*  (str.to.re " ") )  (re.union  (re.++  (str.to.re "\x2d")  (str.to.re "\x2d"))  (str.to.re "\x23")))) ) ) ))
(assert (= true (not (= (- 1) var2 )) ))
(assert (= true (= var6 var4 ) ))
(assert (= true (= 2 var7 ) ))
(assert (= true (= (str.++ var10 var11 ) var9 ) ))
(assert (= true (= "select userid, password, ssn, salary, email from employee where userid=" var10 ) ))
(assert (= true (= true var13 ) ))
(assert (= true (= (= var11 var15 ) var13 ) ))

(check-sat)
(get-model)