(set-logic QF_S)
(set-option :produce-models true)
(set-option :strings-exp true)
(declare-fun var536 () String)
(declare-fun var538 () String)
(declare-fun var539 () String)
(declare-fun var541 () String)
(declare-fun var542 () String)
(declare-fun var543 () String)
(declare-fun var545 () String)
(declare-fun var546 () String)
(declare-fun var547 () String)
(declare-fun var549 () String)
(declare-fun var550 () String)
(declare-fun var551 () String)
(declare-fun var553 () String)
(declare-fun var555 () String)
(declare-fun var557 () Int)
(declare-fun var561 () String)
(declare-fun var562 () String)
(declare-fun var563 () String)
(declare-fun var565 () String)
(declare-fun var566 () String)
(declare-fun var567 () String)
(declare-fun var568 () String)
(declare-fun var569 () String)
(declare-fun var570 () String)
(declare-fun var571 () String)
(declare-fun var572 () String)
(declare-fun var574 () Int)
(declare-fun var577 () String)
(declare-fun var576 () String)
(declare-fun var578 () String)
(declare-fun sv1 () String)
(declare-fun sv2 () String)

(assert (= true (= sv1 sv2 ) ))
(assert (= true (str.in.re var578 (re.++ (re.++ (re.++  (re.++ (re.* re.allchar ) (re.++  (str.to.re "'") (re.++ (re.+  (str.to.re " ") ) (re.++  (re.union  (str.to.re "O")  (str.to.re "o")) (re.++  (re.union  (str.to.re "R")  (str.to.re "r")) (re.++ (re.+  (str.to.re " ") )  (str.to.re "'"))))))) (str.to.re sv1) ) (re.++  (re.++  (str.to.re "'") (re.++ (re.* re.allchar ) (re.++  (str.to.re "=") (re.++ (re.* re.allchar )  (str.to.re "'"))))) (str.to.re sv2) ) )  (re.++  (str.to.re "'") (re.++ (re.*  (str.to.re " ") )  (re.union  (re.++  (str.to.re "\x2d")  (str.to.re "\x2d"))  (str.to.re "\x23")))) ) ) ))
(assert (= true (= var538 var536 ) ))
(assert (= true (= (str.++ var539 "' ORDER BY c_first ASC" ) var538 ) ))
(assert (= true (= (str.++ var541 var542 ) var539 ) ))
(assert (= true (= (str.++ var543 "' AND c_w_id = '" ) var541 ) ))
(assert (= true (= (str.++ var545 var546 ) var543 ) ))
(assert (= true (= (str.++ var547 "' AND c_d_id = '" ) var545 ) ))
(assert (= true (= (str.++ var549 var550 ) var547 ) ))
(assert (= true (= (str.++ var551 "WHERE c_last = '" ) var549 ) ))
(assert (= true (= (str.++ var553 "FROM tpcc_customer" ) var551 ) ))
(assert (= true (= (str.++ var555 "SELECT c_balance, c_first, c_middle, c_id" ) var553 ) ))
(assert (= true (not (= 0 var557 )) ))
(assert (= true (= var562 var561 ) ))
(assert (= true (= (str.++ var563 "'" ) var562 ) ))
(assert (= true (= (str.++ var565 var542 ) var563 ) ))
(assert (= true (= (str.++ var566 "' AND c_w_id = '" ) var565 ) ))
(assert (= true (= (str.++ var567 var546 ) var566 ) ))
(assert (= true (= (str.++ var568 "' AND c_d_id = '" ) var567 ) ))
(assert (= true (= (str.++ var569 var550 ) var568 ) ))
(assert (= true (= (str.++ var570 "WHERE c_last = '" ) var569 ) ))
(assert (= true (= (str.++ var571 "FROM tpcc_customer" ) var570 ) ))
(assert (= true (= (str.++ var572 "SELECT count\x28c_id\x29 AS namecnt" ) var571 ) ))
(assert (= true (not (= 0 var574 )) ))
(assert (= true (= var546 var577 ) ))
(assert (= true (= var542 var576 ) ))
(assert (= true (= var550 var578 ) ))

(check-sat)
(get-model)