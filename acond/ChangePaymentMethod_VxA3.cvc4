(set-logic QF_S)
(set-option :produce-models true)
(set-option :strings-exp true)
(declare-fun var44 () String)
(declare-fun var45 () String)
(declare-fun var46 () String)
(declare-fun var47 () String)
(declare-fun var49 () String)
(declare-fun var51 () String)
(declare-fun var52 () String)
(declare-fun var53 () String)
(declare-fun var55 () String)
(declare-fun var57 () String)
(declare-fun var58 () String)
(declare-fun sv1 () String)
(declare-fun sv2 () String)

(assert (= true (= sv1 sv2 ) ))
(assert (= true (str.in.re var58 (re.++ (re.++ (re.++  (re.++ (re.* re.allchar ) (re.++  (str.to.re "'") (re.++ (re.+  (str.to.re " ") ) (re.++  (re.union  (str.to.re "O")  (str.to.re "o")) (re.++  (re.union  (str.to.re "R")  (str.to.re "r")) (re.++ (re.+  (str.to.re " ") )  (str.to.re "'"))))))) (str.to.re sv1) ) (re.++  (re.++  (str.to.re "'") (re.++ (re.* re.allchar ) (re.++  (str.to.re "=") (re.++ (re.* re.allchar )  (str.to.re "'"))))) (str.to.re sv2) ) )  (re.++  (str.to.re "'") (re.++ (re.*  (str.to.re " ") )  (re.union  (re.++  (str.to.re "\x2d")  (str.to.re "\x2d"))  (str.to.re "\x23")))) ) ) ))
(assert (= true (= var45  var44 ) ))
(assert (= true (= (str.++ var46 var47 ) var45 ) ))
(assert (= true (= (str.++ var49 "where C_ID =" ) var46 ) ))
(assert (= true (= (str.++ var51 var52 ) var49 ) ))
(assert (= true (= (str.++ var53 "C_PO=" ) var51 ) ))
(assert (= true (= (str.++ var55 "'," ) var53 ) ))
(assert (= true (= (str.++ var57 var58 ) var55 ) ))

(check-sat)
(get-model)