(set-logic QF_S)
(set-option :produce-models true)
(set-option :strings-exp true)
(declare-fun var795 () String)
(declare-fun var796 () String)
(declare-fun var798 () String)
(declare-fun var799 () String)
(declare-fun var801 () String)
(declare-fun var802 () String)
(declare-fun var804 () String)
(declare-fun var805 () String)
(declare-fun var807 () String)
(declare-fun var809 () String)
(declare-fun var811 () Int)
(declare-fun var814 () String)
(declare-fun var813 () String)
(declare-fun var815 () String)
(declare-fun var763 () String)
(declare-fun var765 () String)
(declare-fun var766 () String)
(declare-fun var768 () String)
(declare-fun var770 () String)
(declare-fun var771 () String)
(declare-fun var772 () String)
(declare-fun var774 () String)
(declare-fun var775 () String)
(declare-fun var776 () String)
(declare-fun var778 () String)
(declare-fun var779 () String)
(declare-fun var780 () String)
(declare-fun var782 () String)
(declare-fun var784 () String)
(declare-fun var786 () String)
(declare-fun var788 () String)
(declare-fun var789 () String)
(declare-fun var790 () Int)
(declare-fun var794 () String)
(declare-fun sv1 () String)
(declare-fun sv2 () String)

(assert (= true (= sv1 sv2 ) ))
(assert (= true (str.in.re var813 (re.++ (re.++ (re.++  (re.++ (re.* re.allchar ) (re.++  (str.to.re "'") (re.++ (re.+  (str.to.re " ") ) (re.++  (re.union  (str.to.re "O")  (str.to.re "o")) (re.++  (re.union  (str.to.re "R")  (str.to.re "r")) (re.++ (re.+  (str.to.re " ") )  (str.to.re "'"))))))) (str.to.re sv1) ) (re.++  (re.++  (str.to.re "'") (re.++ (re.* re.allchar ) (re.++  (str.to.re "=") (re.++ (re.* re.allchar )  (str.to.re "'"))))) (str.to.re sv2) ) )  (re.++  (str.to.re "'") (re.++ (re.*  (str.to.re " ") )  (re.union  (re.++  (str.to.re "\x2d")  (str.to.re "\x2d"))  (str.to.re "\x23")))) ) ) ))
(assert (= true (= var795 var794 ) ))
(assert (= true (= (str.++ var796 "'" ) var795 ) ))
(assert (= true (= (str.++ var798 var779 ) var796 ) ))
(assert (= true (= (str.++ var799 "' AND c_w_id = '" ) var798 ) ))
(assert (= true (= (str.++ var801 var775 ) var799 ) ))
(assert (= true (= (str.++ var802 "' AND c_d_id = '" ) var801 ) ))
(assert (= true (= (str.++ var804 var789 ) var802 ) ))
(assert (= true (= (str.++ var805 "WHERE c_id = '" ) var804 ) ))
(assert (= true (= (str.++ var807 "FROM tpcc_customer" ) var805 ) ))
(assert (= true (= (str.++ var809 "SELECT c_balance, c_first, c_middle, c_last" ) var807 ) ))
(assert (= true (= 0 var811 ) ))
(assert (= true (= var775 var814 ) ))
(assert (= true (= var779 var813 ) ))
(assert (= true (= var789 var815 ) ))
(assert (= true (= var765 var763 ) ))
(assert (= true (= (str.++ var766 "\x29 WHERE rownum = 1" ) var765 ) ))
(assert (= true (= (str.++ var768 "' ORDER BY o_id DESC" ) var766 ) ))
(assert (= true (= (str.++ var770 var771 ) var768 ) ))
(assert (= true (= (str.++ var772 "' AND o_c_id = '" ) var770 ) ))
(assert (= true (= (str.++ var774 var775 ) var772 ) ))
(assert (= true (= (str.++ var776 "' AND o_d_id = '" ) var774 ) ))
(assert (= true (= (str.++ var778 var779 ) var776 ) ))
(assert (= true (= (str.++ var780 "WHERE o_w_id = '" ) var778 ) ))
(assert (= true (= (str.++ var782 "FROM tpcc_orderr" ) var780 ) ))
(assert (= true (= (str.++ var784 "SELECT o_id, o_carrier_id, o_entry_d" ) var782 ) ))
(assert (= true (= (str.++ var786 "SELECT \x2a FROM \x28" ) var784 ) ))
(assert (= true (or (= var771 var789 ) (= var771 var788 ) ) ))
(assert (= true (not (= 0 var790 )) ))

(check-sat)
(get-model)