(set-logic QF_S)
(set-option :produce-models true)
(set-option :strings-exp true)
(declare-fun var598 () String)
(declare-fun var600 () Int)
(declare-fun var604 () String)
(declare-fun var605 () String)
(declare-fun var606 () String)
(declare-fun var608 () String)
(declare-fun var609 () String)
(declare-fun var610 () String)
(declare-fun var611 () String)
(declare-fun var612 () String)
(declare-fun var613 () String)
(declare-fun var614 () String)
(declare-fun var615 () String)
(declare-fun var617 () Int)
(declare-fun var620 () String)
(declare-fun var619 () String)
(declare-fun var621 () String)
(declare-fun var579 () String)
(declare-fun var581 () String)
(declare-fun var582 () String)
(declare-fun var584 () String)
(declare-fun var585 () String)
(declare-fun var586 () String)
(declare-fun var588 () String)
(declare-fun var589 () String)
(declare-fun var590 () String)
(declare-fun var592 () String)
(declare-fun var593 () String)
(declare-fun var594 () String)
(declare-fun var596 () String)
(declare-fun sv1 () String)
(declare-fun sv2 () String)

(assert (= true (= sv1 sv2 ) ))
(assert (= true (str.in.re var619 (re.++ (re.++ (re.++  (re.++ (re.* re.allchar ) (re.++  (str.to.re "'") (re.++ (re.+  (str.to.re " ") ) (re.++  (re.union  (str.to.re "O")  (str.to.re "o")) (re.++  (re.union  (str.to.re "R")  (str.to.re "r")) (re.++ (re.+  (str.to.re " ") )  (str.to.re "'"))))))) (str.to.re sv1) ) (re.++  (re.++  (str.to.re "'") (re.++ (re.* re.allchar ) (re.++  (str.to.re "=") (re.++ (re.* re.allchar )  (str.to.re "'"))))) (str.to.re sv2) ) )  (re.++  (str.to.re "'") (re.++ (re.*  (str.to.re " ") )  (re.union  (re.++  (str.to.re "\x2d")  (str.to.re "\x2d"))  (str.to.re "\x23")))) ) ) ))
(assert (= true (= (str.++ var596 "FROM tpcc_customer" ) var594 ) ))
(assert (= true (= (str.++ var598 "SELECT c_balance, c_first, c_middle, c_id" ) var596 ) ))
(assert (= true (not (= 0 var600 )) ))
(assert (= true (= var605 var604 ) ))
(assert (= true (= (str.++ var606 "'" ) var605 ) ))
(assert (= true (= (str.++ var608 var585 ) var606 ) ))
(assert (= true (= (str.++ var609 "' AND c_w_id = '" ) var608 ) ))
(assert (= true (= (str.++ var610 var589 ) var609 ) ))
(assert (= true (= (str.++ var611 "' AND c_d_id = '" ) var610 ) ))
(assert (= true (= (str.++ var612 var593 ) var611 ) ))
(assert (= true (= (str.++ var613 "WHERE c_last = '" ) var612 ) ))
(assert (= true (= (str.++ var614 "FROM tpcc_customer" ) var613 ) ))
(assert (= true (= (str.++ var615 "SELECT count\x28c_id\x29 AS namecnt" ) var614 ) ))
(assert (= true (not (= 0 var617 )) ))
(assert (= true (= var589 var620 ) ))
(assert (= true (= var585 var619 ) ))
(assert (= true (= var593 var621 ) ))
(assert (= true (= var581 var579 ) ))
(assert (= true (= (str.++ var582 "' ORDER BY c_first ASC" ) var581 ) ))
(assert (= true (= (str.++ var584 var585 ) var582 ) ))
(assert (= true (= (str.++ var586 "' AND c_w_id = '" ) var584 ) ))
(assert (= true (= (str.++ var588 var589 ) var586 ) ))
(assert (= true (= (str.++ var590 "' AND c_d_id = '" ) var588 ) ))
(assert (= true (= (str.++ var592 var593 ) var590 ) ))
(assert (= true (= (str.++ var594 "WHERE c_last = '" ) var592 ) ))

(check-sat)
(get-model)