(set-logic QF_S)
(set-option :produce-models true)
(set-option :strings-exp true)
(declare-fun var2 () String)
(declare-fun var3 () String)
(declare-fun var4 () String)
(declare-fun var5 () String)
(declare-fun var6 () String)
(declare-fun var7 () String)
(declare-fun var8 () Int)
(declare-fun var13 () String)
(declare-fun var14 () String)
(declare-fun var16 () Bool)
(declare-fun var19 () String)
(declare-fun var22 () Bool)
(declare-fun var23 () String)
(declare-fun var1 () String)

(assert (= true (str.in.re var23  (re.union  (re.++  (str.to.re "\x3c") (re.++ (re.*  (str.to.re " ") ) (re.++  (re.union  (str.to.re "S")  (str.to.re "s")) (re.++  (re.union  (str.to.re "C")  (str.to.re "c")) (re.++  (re.union  (str.to.re "R")  (str.to.re "r")) (re.++  (re.union  (str.to.re "I")  (str.to.re "i")) (re.++  (re.union  (str.to.re "P")  (str.to.re "p")) (re.++  (re.union  (str.to.re "T")  (str.to.re "t")) (re.++ (re.*  (str.to.re " ") ) (re.++  (str.to.re "\x3e") (re.++ (re.+  (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (re.union  (str.to.re "\x28") (re.union  (str.to.re "\x29")  (str.to.re ";")))))) ) (re.++  (str.to.re "\x3c") (re.++  (str.to.re "/") (re.++ (re.*  (str.to.re " ") ) (re.++  (re.union  (str.to.re "S")  (str.to.re "s")) (re.++  (re.union  (str.to.re "C")  (str.to.re "c")) (re.++  (re.union  (str.to.re "R")  (str.to.re "r")) (re.++  (re.union  (str.to.re "I")  (str.to.re "i")) (re.++  (re.union  (str.to.re "P")  (str.to.re "p")) (re.++  (re.union  (str.to.re "T")  (str.to.re "t")) (re.++  (str.to.re " ")  (str.to.re "\x3e"))))))))))))))))))))))  (re.++  (str.to.re "\x3c") (re.++ (re.*  (str.to.re " ") ) (re.++  (re.union  (str.to.re "I")  (str.to.re "i")) (re.++  (re.union  (str.to.re "M")  (str.to.re "m")) (re.++  (re.union  (str.to.re "G")  (str.to.re "g")) (re.++  (str.to.re " ") (re.++  (re.union  (str.to.re "S")  (str.to.re "s")) (re.++  (re.union  (str.to.re "R")  (str.to.re "r")) (re.++  (re.union  (str.to.re "C")  (str.to.re "c")) (re.++  (str.to.re "=") (re.++  (re.union  (str.to.re "J")  (str.to.re "j")) (re.++  (re.union  (str.to.re "A")  (str.to.re "a")) (re.++  (re.union  (str.to.re "V")  (str.to.re "v")) (re.++  (re.union  (str.to.re "A")  (str.to.re "a")) (re.++  (re.union  (str.to.re "S")  (str.to.re "s")) (re.++  (re.union  (str.to.re "C")  (str.to.re "c")) (re.++  (re.union  (str.to.re "R")  (str.to.re "r")) (re.++  (re.union  (str.to.re "I")  (str.to.re "i")) (re.++  (re.union  (str.to.re "P")  (str.to.re "p")) (re.++  (re.union  (str.to.re "T")  (str.to.re "t")) (re.++  (str.to.re ":") (re.++ (re.+  (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (re.union  (str.to.re "\x28") (re.union  (str.to.re "\x29")  (str.to.re ";")))))) ) (re.++ (re.*  (str.to.re " ") )  (str.to.re "\x3e"))))))))))))))))))))))))) ) ))
(assert (= true (= var3 var2 ) ))
(assert (= true (= var7 var4 ) ))
(assert (= true (or (= var4 var6 ) (= var4 var5 ) ) ))
(assert (= true (not (= 0 var8 )) ))
(assert (= true (not (= "" var5 )) ))
(assert (= true (or (= "" var14 ) (= "" var13 ) ) ))
(assert (= true (not (= true var16 )) ))
(assert (= true (= (= "1" var19 ) var16 ) ))
(assert (= true (= true var22 ) ))
(assert (= true (= (= "1" var23 ) var22 ) ))
(assert (= true (= var1 var4 ) ))

(check-sat)
(get-model)