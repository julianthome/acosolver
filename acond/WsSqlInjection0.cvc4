(set-logic QF_S)
(set-option :produce-models true)
(set-option :strings-exp true)
(declare-fun var1 () String)
(declare-fun var2 () String)
(declare-fun var3 () String)
(declare-fun var4 () String)
(declare-fun var7 () Int)
(declare-fun var8 () Int)
(declare-fun var9 () String)
(declare-fun var11 () Int)
(declare-fun var6 () String)
(declare-fun sv7 () Int)
(declare-fun sv8 () Int)

(assert (= true (>= sv7 sv8 ) ))
(assert (= true (str.in.re var4 (re.++ (re.++ (re.++  (re.++ (re.+ (re.range "0" "9") ) (re.++ (re.+  (str.to.re " ") ) (re.++  (re.union  (str.to.re "O")  (str.to.re "o")) (re.++  (re.union  (str.to.re "R")  (str.to.re "r")) (re.+  (str.to.re " ") ))))) (str.to.re (int.to.str sv7 )) )  (re.++ (re.+  (str.to.re " ") ) (re.++  (str.to.re "\x3e") (re.++  (str.to.re "=") (re.+  (str.to.re " ") )))) ) (str.to.re (int.to.str sv8 )) ) ) ))
(assert (= true (= var2  var1 ) ))
(assert (= true (= (str.++ var3 var4 ) var2 ) ))
(assert (= true (= "SELECT \x2a FROM user_data WHERE userid =" var3 ) ))
(assert (= true (>= var8 var7 ) ))
(assert (= true (= (str.len var9 ) var8 ) ))
(assert (= true (or (= var7 var11 ) (= var7 0 ) ) ))
(assert (= true (= var4 var6 ) ))

(check-sat)
(get-model)